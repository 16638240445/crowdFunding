<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhiyou100.crowdFunding.mapper.IUserMapper">
	<cache eviction="FIFO" flushInterval="10000" readOnly="true"
		size="521" />
	
	<!-- resultMap映射 -->
	<resultMap type="User" id="UserMap">
		<id column="us_id" property="usId" />
		<result column="us_email" property="usEmail" />
		<result column="us_name" property="usName" />
		<result column="us_password" property="usPassword" />
		<result column="us_money" property="usMoney" />
		<result column="us_idcard" property="usIdcard" />
		<result column="us_phone" property="usPhone" />
		<result column="us_address" property="usAddress" />
		<result column="us_role" property="usRole" />
		<result column="us_sex" property="usSex" />
		<result column="us_code" property="usCode" />
		<result column="us_create_time" property="usCreateTime" />
		<result column="us_update_time" property="usUpdateTime" />
	</resultMap>
	<!-- 添加的sql语句 -->
	<insert id="doCreate" parameterType="User" keyProperty="usId" useGeneratedKeys="true">
		insert into
		user(us_email,us_name,us_password,us_money,us_idcard,us_phone,us_address,us_role,us_sex,us_code,us_create_time,us_update_time)
		values(#{usEmail},#{usName},#{usPassword},#{usMoney},#{usIdcard},#{usPhone},#{usAddress},#{usRole},#{usSex},#{usCode},#{usCreateTime},#{usUpdateTime});
	</insert>

	<!-- 更改的sql语句 -->
	<update id="doUpdate" parameterType="User">
		update user set
		us_email=#{usEmail},us_name=#{usName},us_password=#{usPassword},us_money=#{usMoney},
		us_idcard=#{usIdcard},us_phone=#{usPhone},us_address=#{usAddress},us_role=#{usRole},us_sex=#{usSex},
		us_code=#{usCode},us_update_time=#{usUpdateTime}
		where us_id=#{usId};
	</update>
	<!-- 通过id删除的sql语句 -->
	<delete id="doRemove" parameterType="java.lang.Integer">
		delete from user where
		us_id=#{usId};
	</delete>
	<!--通过id批量删除的sql语句 -->
	<delete id="doRemoveBatch" parameterType="java.lang.Integer">
		delete from user where us_id in
		<foreach item="ele" collection="collection" open="("
			separator="," close=")">
			#{ele}
		</foreach>
	</delete>
	<!--通过id查询的sql语句 -->
	<select id="findById" parameterType="java.lang.Integer"
		resultMap="UserMap">
		select * from user where us_id=#{usId};
	</select>
	<!-- 查询全部并分页的sql语句 -->
	<select id="findAll" resultMap="UserMap">
		select * from user LIMIT
		#{start} , #{lineSize};
	</select>
	<!-- 查询全部数量的sql语句 -->
	<select id="getAllCount" resultType="java.lang.Long">
		select count(0) from
		user;
	</select>
	<!-- 模糊查询数量 -->
	<select id="getAllCountSplit" resultType="java.lang.Long">
		select count(0) from user
		<if test="column != null and keyword != null">
			where ${column} like #{keyword}
		</if>
	</select>
	<!-- 模糊查询全部并分页的sql语句 -->
	<select id="findAllSplit" parameterType="java.util.Map"
		resultMap="UserMap">
		select * from user
		<if test="column != null and keyword != null">
			where ${column} like #{keyword}
		</if>
		LIMIT #{start} , #{lineSize};
	</select>
	<!-- 通过账号密码查询的sql语句 -->
	<select id="findByLogin" parameterType="java.util.Map"
		resultMap="UserMap">
		select * from user where (us_email=#{usEmail} or us_phone=#{usPhone}) and us_password=#{usPassword} and us_role=1;
	</select>
	<!-- 通过邮箱查找 -->
		<select id="findByEmail" parameterType="java.lang.String"
		resultMap="UserMap">
		select * from user where us_email=#{usEmail};
	</select>
	<!-- 更改用户状态 -->
	<update id="doUpdateRole" parameterType="java.lang.Integer">
	update user set us_role = 1 where us_id = #{UsId} ;
	</update>
</mapper>